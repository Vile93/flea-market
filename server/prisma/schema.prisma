generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  name              String
  surname           String?
  username          String   @unique
  email             String   @unique
  password          String
  phone             String   @unique
  is_verified       Boolean? @default(false)
  avatar_path       String?
  role              Role     @default(USER)
  Review            Review[]
  OfferCustomerUser Offer[]  @relation("CustomerUser")
  Offer             Offer[]
}

model Jwt {
  id    Int    @id @default(autoincrement())
  token String @unique
}

model Review {
  id        Int        @id @default(autoincrement())
  rating    Int
  content   String?
  answer    String?
  user_ref  User       @relation(fields: [user_id], references: [id])
  user_id   Int
  offer_ref Offer      @relation(fields: [offer_id], references: [id])
  offer_id  Int
  type      ReviewType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model OfferImages {
  id        Int    @id @default(autoincrement())
  link      String
  offer_ref Offer  @relation(fields: [offer_id], references: [id])
  offer_id  Int
  order     Int
}

model Offer {
  id                Int             @id @default(autoincrement())
  title             String
  description       String
  type              OfferType
  price_type        PriceType
  price             Float
  user_id           Int
  user_ref          User            @relation(fields: [user_id], references: [id])
  type_id           Int
  type_ref          Type            @relation(fields: [type_id], references: [id])
  region_id         Int
  region_ref        Region          @relation(fields: [region_id], references: [id])
  user_customer_id  Int?
  user_customer_ref User?           @relation("CustomerUser", fields: [user_customer_id], references: [id])
  status            OfferStatus     @default(MODERATE)
  Review            Review[]
  OfferImages       OfferImages[]
  RejectedOffer     OfferRejected[]
}

model OfferRejected {
  id        Int    @id @default(autoincrement())
  offer_ref Offer  @relation(fields: [offer_id], references: [id])
  offer_id  Int
  content   String
}

model Type {
  id           Int      @id @default(autoincrement())
  name         String
  category_id  Int
  category_ref Category @relation(fields: [category_id], references: [id])
  Offer        Offer[]

  @@unique([name, category_id])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  Type Type[]
}

model Region {
  id           Int      @id @default(autoincrement())
  name         String
  location_id  Int
  location_ref Location @relation(fields: [location_id], references: [id])
  Offer        Offer[]

  @@unique([name, location_id])
}

model Location {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Region Region[]
}

enum OfferStatus {
  REJECTED
  MODERATE
  ACCEPTED
  SOLD
}

enum Role {
  ROOT
  ADMIN
  MODERATOR
  USER
}

enum ReviewType {
  SELLER
  CUSTOMER
}

enum OfferType {
  NEW
  OLD
}

enum PriceType {
  PAY
  FREE
  CONTRACT
}
